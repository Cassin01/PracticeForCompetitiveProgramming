#[allow(unused_macros)]
macro_rules! input {
    (source = $s:expr, $($r:tt)*) => {
        let mut iter = $s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
    ($($r:tt)*) => {
        let s = {
            use std::io::Read;
            let mut s = String::new();
            std::io::stdin().read_to_string(&mut s).unwrap();
            s
        };
        let mut iter = s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
}

#[allow(unused_macros)]
macro_rules! input_inner {
    ($iter:expr) => {};
    ($iter:expr, ) => {};

    ($iter:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*}
    };
}

#[allow(unused_macros)]
macro_rules! read_value {
    ($iter:expr, ( $($t:tt),* )) => {
        ( $(read_value!($iter, $t)),* )
    };

    ($iter:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($iter, $t)).collect::<Vec<_>>()
    };

    ($iter:expr, chars) => {
        read_value!($iter, String).chars().collect::<Vec<char>>()
    };

    ($iter:expr, usize1) => {
        read_value!($iter, usize) - 1
    };

    ($iter:expr, $t:ty) => {
        $iter.next().unwrap().parse::<$t>().expect("Parse error")
    };
}

fn main() {
    input! {
        h: usize,
        w: usize,
        s: [chars; h],
    }
    for i in 1..h-1 {
        for j in 1..w-1 {
            if s[i][j] == '#' {
                let mut ok = false;
                if s[i][j+1] == '#' {
                    ok=true;
                }
                else if s[i][j-1] == '#' {
                    ok=true;
                }
                else if s[i+1][j] == '#' {
                    ok=true;
                }
                else if s[i+1][j+1] == '#' {
                    ok=true;
                }
                else if s[i+1][j-1] == '#' {
                    ok=true;
                }
                else if s[i-1][j] == '#' {
                    ok=true;
                }
                else if s[i-1][j+1] == '#' {
                    ok=true;
                }
                else if s[i-1][j-1] == '#' {
                    ok=true;
                }
                if ok == false {
                    println!("No");
                    return;
                }
            }
        }
    }
    for i in 1..h-1 {
        if s[i][0] == '#' {
            if s[i+1][0] == '#' || s[i-1][0] == '#' || s[i][1] == '#' {

            } else {
                println!("{}", s[i+1][0]);
                println!("No");
                return;
            }
        }
        if s[i][w-1] == '#' {
            if s[i+1][w-1] == '#' || s[i-1][w-1] == '#' || s[i][w-2] == '#' {

            } else {
                println!("No");
                return;
            }
        }
    }
    for j in 1..w-1 {
        if s[0][j] == '#' {
            if s[1][j] == '#' || s[0][j+1] == '#' || s[0][j-1] == '#' {
            } else {
                println!("No");
                return;
            }
        }
        if s[h-1][j] == '#' {
            if s[h-2][j] == '#' || s[h-1][j+1] == '#' || s[h-1][j-1] == '#' {
            } else {
                println!("No");
                return;
            }
        }
    }
    if s[0][0] == '#' {
        if s[1][0] == '#' || s[0][1] == '#' {

        } else {
                println!("No");
                return;
        }
    }
    if s[h-1][w-1] == '#' {
        if s[h-2][w-1] == '#' || s[h-1][w-2] == '#' {

        } else {
                println!("No");
                return;
        }
    }
    if s[0][w-1] == '#' {
        if s[1][w-1] == '#' || s[0][w-2] == '#' {

        } else {
                println!("No");
                return;
        }
    }
    if s[h-1][0] == '#' {
        if s[h-2][0] == '#' || s[h-1][1] == '#' {

        } else {
                println!("No");
                return;
        }
    }
    println!("Yes");
}
