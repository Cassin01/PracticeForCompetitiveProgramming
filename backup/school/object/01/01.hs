assembra とcompiler

assembra -> cpu 依存
compiler  -> cpu に依存しない


1960 年代
  各プログラムで共通となる部分を分離　-> Operating System
    ex) 出力と計算を分離させる

1960 年代 -> 1970 年代
  ソフトウェアはハードのおまけ

  ソフトウェア開発者の深刻な不足
  過剰な労働により生産物の質の低下

        ↓

  ソフトウェア危機

    (余談 : 金融は金もらえる <- でもある意味ブラック)

        ↓

  ソフトウェアの基礎理論の体系化
  プログラムの自動化
  開発の方法を整備

        ↓

  ソフトウェア工学
    (機能性、信頼性、保守性、開発効率)

開発のライフサイクル
  要求分析　　　 : 発注者のやりたいこと
  システム設計   : 要求を機能へ　         -- ここまでがSE
  プログラム設計 : 機能をプログラムへ
  コーディング   : 設計に                 -- プログラマ、コーダ
  テスト         : 顧客の意図通り動作するかの検査
  保守           : 運用中に発見された不具合の修正

ソフトウェアのシステム開発方法
  導入方法
  受注方法
  開発手法 <- ウォーターフォールなど

開発手順
  工程
  アクテビティ
  プロダクト

1960 年代 から 1970 年代
はじめの開発手法
  構造化プログラミング -> c言語
  オブジェクト指向     -> c++

